Project Briefing: Cyber Sentinel - Integrated Security Monitoring System

Project Team: Abdullah Mehtab, Nabeel Mahmood Advisors: Sir Rauf Butt (Primary), TBD (Co-Advisor) Institution: Forman Christian College (A Chartered University), Lahore, Pakistan Date: 28th April 2025 (Midway Report date), May 31, 2025 (Final Report submission)

Project Goal: To develop a cost-effective, integrated security monitoring system for local area networks (LANs), specifically targeting small businesses, startups, and home networks. The system leverages the Raspberry Pi as a central monitoring platform and utilizes open-source tools, primarily Wazuh and the ELK Stack, to detect, analyze, and alert on potential security threats.

Key Technologies:

Raspberry Pi 5: Chosen as the primary hardware due to its affordability and suitability for a lightweight, secure environment. The project also experimented with the Raspberry Pi 3 initially for familiarization.
Wazuh: Employed as the Security Information and Event Management (SIEM) tool. Wazuh agents are installed on endpoint devices (Windows/Linux) to collect log data, which is then analyzed by the Wazuh manager for security events.
ELK Stack (Elasticsearch, Logstash, Kibana): Used for log processing, storage, and visualization.
Elasticsearch: Handles data indexing and storage of security logs and alerts.
Logstash: Processes and filters log data, particularly used for formatting critical alerts into clean HTML emails.
Kibana: Provides a web-based dashboard for visualizing security alerts, logs, and system health.
Ubuntu Server/Kali Linux: Operating systems used on the Raspberry Pi for the Wazuh manager and ELK Stack installation. Kali Linux was used for the final implementation on the Raspberry Pi 5.
Filebeat/Packetbeat: Agents used to forward log and network traffic data to Elasticsearch. Filebeat was used for forwarding Wazuh alerts, and Packetbeat was explored for network traffic monitoring.
Postfix: Initially used for sending basic email alerts directly from Wazuh, later replaced by Logstash for improved formatting.
Metasploit, Nmap, Hydra, BeEF: Penetration testing tools used to simulate various attacks (aggressive scans, brute-force, credential dumping, browser hooking) to test the system's detection capabilities.
Core System Architecture and Workflow:

The Cyber Sentinel system operates with a centralized manager-agent architecture on a local network.

Agent Deployment: Wazuh agents are installed on endpoint devices within the LAN.
Log Collection: Agents collect system and application logs from the endpoints.
Data Forwarding (to Manager): Collected log data is sent to the Wazuh manager running on the Raspberry Pi.
Wazuh Analysis: The Wazuh manager analyzes the incoming log data against a set of predefined rules to identify security events and generate alerts. Critical alerts are generated in an alerts.json file.
Data Forwarding (to ELK):Filebeat is configured to read the alerts.json file from the Wazuh manager.
Filebeat forwards the processed alerts and logs to Elasticsearch.
Data Processing (Logstash): Logstash is configured to read data from Elasticsearch, specifically focusing on critical alerts. It filters and formats these alerts, particularly for generating HTML email notifications.
Data Storage (Elasticsearch): Elasticsearch indexes and stores all received log and alert data.
Visualization (Kibana): Kibana connects to Elasticsearch to provide a visual dashboard of security events, allowing administrators to monitor the network, view alerts, and analyze trends.
Notifications: Logstash sends formatted email alerts for critical events to designated end-users.
Key Achievements and Implementation Details:

Base System Deployment: Successful installation and configuration of Wazuh Manager and the ELK Stack (Elasticsearch 7.17.13, Logstash 7.17.13, Kibana 7.17.13) on a Raspberry Pi 5 running Kali Linux.
Agent Deployment and Verification: Deployed Wazuh agents on Windows/Linux endpoints and successfully registered them with the manager, verified through the Wazuh manager and agent logs.
"Verify Connection – in ossec-agent directory, look for “ossec.log” (tail)"
"Look for line indicating successful connection to the manager i.e Connected to the manager at
"BACK TO THE MANAGER TO VERIFY IF AGENT WAS ADDED"
ELK-Wazuh Integration: Established connectivity between the ELK Stack and Wazuh, allowing alerts generated by Wazuh to be indexed in Elasticsearch and visualized in Kibana.
"Check if Wazuh is properly recognized by ELK Stack (Kibana Webserver) --- Check using: curl -u elastic:CyberSenti -X GET 'http://localhost:9200/_cat/indices?v' | grep wazuh"
"You should see wazuh-alerts as “green”"
Email Alerting: Implemented email notifications for critical alerts. Initially used Postfix for basic emails, later integrated Logstash for cleaner, HTML-formatted emails.
"Wazuh working optimally and got Email alerts through Filebeat and Postfix. These emails were for critical alerts. These emails were ugly and not well formatted, soon Logstash was added which made Filebeat's work only towards Elastic, and Postfix's work was completely removed (it was no longer used)."
"Set config to read info from wazuh’s ossec alerts.json, filter important data, make beautiful html format and email where needed."
Attack Simulation and Detection Proof: Demonstrated the system's ability to detect common attacks by simulating them using penetration testing tools and verifying the corresponding alerts in Kibana and via email. Examples include:
Nmap aggressive scan: "Simple Aggressive scan using Nmap Run this command on Kali nmap -A 192.168.100.31" resulting in an Email Alert.
Hydra SSH/RDP brute-force: "Brute-Force SSH Login Attack (Common Attack)... hydra -l Administrator -P /usr/share/wordlists/rockyou.txt ssh://192.168.100.31" resulting in a Critical Alert showcasing multiple login failures.
Metasploit credential dumping (psexec_ntdsgrab): "Simulate Credential Dumping... use auxiliary/admin/smb/psexec_ntdsgrab" proof showing the attack execution.
BeEF browser hooking: "Simulate BeEF Browser Hook... Serve the Page: Start a simple web server on Kali... This hosts index.html on port 80. The victim will access it at http://<kali_ip>." Proof showing the hooked browser in the BeEF UI.
Impacket PsExec command execution.
File Integrity Monitoring (FIM) detection of changes to critical files (e.g., /etc/passwd).
Performance Optimization: Addressed resource constraints of the Raspberry Pi by optimizing Elasticsearch memory usage, setting heap size to 1GB to prevent system crashes.
"Which is when we started the Plugin Installation for Wazuh-ELK Stack and a minute after the [Raspberry Pi] started giving errors and froze... free -h This command revealed that out of 8-GB Ram, 7-GB was constantly being used, and ElasticSearch was taking up 4-GB... Optimized Elasticsearch memory usage (1GB heap size) to prevent crashes."
Executable Installer and GUI: Developed an executable wizard installer for Linux to automate the setup process and a GUI for local monitoring of agents, services, and logs on the Wazuh Manager.
"We have a executable wizard installer for Cyber Sentinal for linux which would install all of these modules/libraries with version control, and download all the config files through our github and upload to respective directories. Then there is a GUI which would allow you to monitor the agents/services/logs locally through the Wazuh Manager."
Challenges and Limitations:

Resource Constraints: The limited resources of the Raspberry Pi required optimization efforts, particularly for Elasticsearch.
Version Conflicts: Encountered issues with version compatibility between Wazuh and the ELK Stack, necessitating specific version matching.
Detection Limitations: Wazuh's primary reliance on OS-level logs limited its detection of certain web-based attacks and advanced post-exploitation activities like Meterpreter, especially on outdated systems like Metasploitable-3. "Wazuh is limited to detecting only windows/os LOGS based attacks since it read OS events. Some Web-Based attacks and meterpreter attacks would launch successfully with minimal detection and not clear alerts."
Network Traffic Monitoring: The current implementation primarily focuses on log analysis. Detecting network traffic anomalies (like the failed FTP data exfiltration test case, TC-8) remains a pending defect. This highlights the need for integrating network monitoring tools like Packetbeat more effectively or leveraging ML models designed for network data.
Scalability to Larger Networks: The system's current scope is limited to small, local networks due to potential security risks and performance limitations when scaling to larger or external networks. The system was primarily tested with a small number of active agents (6).
Hardware Dependencies: Reliance on the Raspberry Pi hardware introduces risks such as SD card failure or overheating.
External Dependencies: The installer relies on internet access and the availability of files on GitHub. Email alerting depends on a stable SMTP service.
Sublime Text Installation Issues: Encountered difficulties installing Sublime Text using apt-get, requiring the use of snapd.
Future Work and Potential Enhancements:

Machine Learning Integration: Exploration of integrating ML models (LogBERT, TinyBERT, TabNet) to enhance threat detection capabilities, particularly for anomaly detection and analyzing unstructured log data and structured network traffic. This is currently in the planning or in-progress stages.
"Cyber Sentinel system incorporates three machine learning models: LogBERT, TinyBERT, TinyBERT, and TabNet. These models were chosen to enhance threat detection capabilities while operating within the Raspberry Pi’s resource constraints."
"TabNet: Designed for structured tabular data... In Cyber Sentinel, TabNet would analyze structured data from Packetbeat and Wazuh logs to detect anomalies and classify events, such as identifying unusual network traffic patterns indicative of DDoS attacks."
Custom Attack Simulation: Plan to create a mock Windows service to test detection of specific, unknown threats through service startup, unauthorized port access, and file tampering monitoring by Wazuh.
Employee Monitoring via Custom Algorithm: Planning to develop Python scripts to analyze Wazuh logs for anomalies related to user activity (logins, app usage, network usage) to enhance employee monitoring with ethical considerations and user consent.
Automated Responses: Partially implemented active-response scripts to automatically block brute-force IPs via the firewall. Further testing and refinement are needed to avoid false positives and determine appropriate alert levels for auto-blocking.
Honeypot Integration: Considering the feasibility of integrating honeypots to divert and analyze attacks without exposing the Raspberry Pi.
Alternative Hardware: Exploration of using alternative low-cost devices, such as the NVIDIA Jetson Nano, for larger networks in the future.
Improved User Interface: Continuous development of the GUI for better agent/service/log monitoring.
Scalability and External Network Considerations: Research and development to address the challenges of expanding the system to larger and external networks, including security risks and performance requirements.
Compliance and Data Privacy: Considering future compliance with regulations like GDPR, especially if employee monitoring features are enhanced.
Target Audience and Value Proposition:

The Cyber Sentinel system is designed for Small Businesses/Startups/Home Networks that require a cost-effective security monitoring solution but may lack dedicated IT security staff or significant budget for commercial SIEM solutions. The system provides essential threat detection, alerting, and visualization capabilities on a low-cost platform, enabling business owners or administrators to be informed of potential security incidents and take action. "The output of this project would be to Small Businesses/Startups/Home Networks etc. The Security/CEO would recieve Email alerts based on what happened, then they could take action. They can see details through Kibana Dashboard on the Wazuh Manager (ON the Kali Linux OS inside Raspberry Pi 5)."

Overall:

The Cyber Sentinel project successfully demonstrates the feasibility of implementing a basic integrated security monitoring system using open-source tools on a resource-constrained platform like the Raspberry Pi. While facing challenges related to resource limitations and the inherent limitations of log-based detection, the project has achieved key milestones in deployment, integration, alerting, and initial attack detection proof. Future work aims to enhance the system's detection capabilities through machine learning, improve automated responses, and explore scalability for broader application.